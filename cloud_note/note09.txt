#Spring的事务管理
##事务概念
事务是与数据库操作有关，主要用于insert,update,delete语句。
事务一般默认一个DML语句就是一个独立事务,如果一个操作
就涉及一个DML语句可以采用默认处理。
事务是用于保障多个DML语句操作完整性,如果一个操作涉及
多个DML过程，必须采用事务控制。

public void f1(){
  try{
    //开启事务，取消自动提交
    //更新笔记信息-update
    //如果分享了，更新分享信息-update
    //追加操作日志-insert
    //提交事务
  }catch(){
      //回滚事务，撤销前面执行的SQL
  }
}

try{
//开启事务
从A账号将钱-1000--update
给B账号将钱+1000--update
//提交事务
}catch(){
//回滚事务
}

##Spring对事务的支持
 Spring提供一些API，封装了数据库的事务管理功能。
 JDBC和Mybatis:使用DataSourceTransactionManager
 Hibernate:使用HibernateTransactionManager
 con.setAutoCommit(false);
 con.commit();
 con.rollback();

//配置，指定TransactionManager组件管理f1方法事务
public void f1(){
 从A账号将钱-1000--update
 给B账号将钱+1000--update
}

Spring事务控制使用时，主要是基于配置方法使用，
不需要Java代码控制。

##Spring事务控制方法
-在spring容器配置中定义一个bean组件
 (DataSourceTransactionManager)
-在spring容器配置开启事务注解的支持
 （@Transactional）
-在目标组件方法前或类前追加@Transactional标记
###采用默认事务,效果：笔记信息变了;分享信息没变
public void f1(){
   //更新笔记信息--更新成功
   //更新分享信息--更新失败
}
###采用Spring事务，效果：笔记信息没变;分享信息没变
@Transactional
public void f1(){
   //更新笔记信息--撤销,回滚
   //更新分享信息--更新失败
}
//DataSourceTransactionManager会构建下面逻辑
try{
 f1();//调用f1方法
 //提交事务 
}catch(){
 //回滚事务
}

使用Spring进行事务管理,可以通过配置追加事务功能,
灵活、简单，不需要对原有组件方法代码修改。

##Spring事务控制特性

@Transactional注解有4个属性,可以指定事务管理细节。
默认情况下4个属性值为：
readOnly=false
rollbackFor=RuntimeException.class
propagation=REQUIRED
isolation=DEFAULT

##readOnly属性
 控制事务为只读型还是可读写型。
 只读型readOnly=true：只支持select
 读写型readOnly=false：支持select,update,insert,delete
 建议：只包含select的业务方法,可以采用只读型事务控制。

##rollbackFor属性
默认业务方法遇到RuntimeException回滚方法中的SQL。
典型RuntimeException有：空指针,类型转换,数组下标越界等
非RuntimeException有：IOException,FileNoteFoundException等

//指定方法抛出IOException时撤销里面的sql操作
@Transactional(rollbackFor=IOException.class)
public void f1(){
  //执行sql操作
  //执行文件操作,结果抛出IOException
}

@Transactional(rollbackFor=MyException.class)
public void f2(){
  //执行sql操作
  //A.f1();//抛出一个MyException(没有继承RuntimeException)
}

##propagation属性
事务传播特性,当带有@Transactional方法调用另一个
带有@Transactional方法时,才会有事务传播。

如果第二个@Transactional的propagation属性为
REQUIRED类型时,表示第二个方法和前面第一个方法
为一个整体,采用一个事务控制，可以撤销第一个方法SQL。

如果第二个@Transactional的propagation属性为
REQUIRES_NEW类型时,表示第二方法采用一个新事务控制,
不能撤销前面第一个方法SQL。

@Transactional
ScoreService.addScore()
@Transactional
ShareService.shareNote()

@Transactional
public void shareNote(){
   //执行分享笔记操作SQL
   //ScoreService.addScore()//@Transactional
}

##isolation属性
控制事务的隔离级别，默认为DEFAULT，意思是按数据库
隔离级别决定。例如Oracle默认为READ_COMMITED
意义：将涉及相同数据的多个事务操作,
          避免冲突根据需要隔离开。
级别划分为以下几种：
READ_UNCOMMITTED 读未提交 1
READ_COMMITTED 读已提交2
REPEATABLE_READ 可重复读3
SERIALIZABLE 序列化4
级别越低，并发处理能力越强，但是安全性越差。
级别越高，并发处理能力越差，但是安全性越强。

#更新笔记本
##发送Ajax请求
-点击对话框中的"确定"按钮,onclick
-请求参数：笔记本ID，输入框中的笔记本名
-请求地址：/book/rename.do
##服务器端处理
/book/rename.do
-->RenameBookController.execute
-->BookService.renameBook
-->BookDao.updateName-->cn_notebook
-->返回NoteResult结构的JSON结果
##Ajax回调处理
success函数：a.关闭对话框;b.修改列表li中笔记本名;c.提示成功



===================
a.做了什么项目，项目功能是什么？
b.项目采用哪些技术？
  （ajax,spring,mybatis）
  首先介绍什么是ajax
  然后介绍项目用ajax做什么事
  最后介绍为什么选择ajax技术
c.项目你负责哪些工作
   课上项目：负责功能编写实现，负责xxxx功能。
   课外项目：需求非常熟悉，技术选型,架构搭建，功能开发等
d.开发中遇到过哪些问题，如何解决
   -js动态绑定on函数
   -js数据绑定data函数
   -功能需求实现时发现的一些问题
   -组合查询问题，可以动态根据不同条件搜索
  （mybatis动态SQL）
   花费很长时间解决，自己总结... ...
e.开发中获得的收获
  通过项目获得了哪些锻炼，掌握了哪些新的技术。
  使用的技术有哪些不足















